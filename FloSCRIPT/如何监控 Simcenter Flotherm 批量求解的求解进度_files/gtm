const labelMap = {
    "/topiccatalog/": "Join the Discussion",
    "/knowledge": "Browse Articles",
    "/groups": "Groups",
    "https://events.sw.siemens.com/en-US/realizelive/": "Realize Live"
};

const ELEMENT_CHECK_COUNT = 1

pollerForFn = (fnName, selector) => {
    let varName = `${fnName}Poller`;
    let counter = `${fnName}PollerCount`;
    this[counter] = 0;
    this[varName] = setInterval((v, f, s, c) => {
        if (this[c] < ELEMENT_CHECK_COUNT) {
            // console.log(fnName, '  ', this[c]);
            let elements = document.querySelectorAll(s);
            console.log(counter, ' : ' , elements.length)
            if (elements.length) {
                clearInterval(this[v]);
                window[f](s);
            }
            this[c]++;
        } else {
            // console.log(fnName, ' Clear ' );
            clearInterval(this[v]);
        }
    }, 1000, varName, fnName, selector, counter);
}

pollerForFnURLCheck = (fnName, selector, urlToCheck) => {
    let varName = `${fnName}URLPoller`;
    let counter = `${fnName}URLPollerCount`;
    this[counter] = 0;
    this[varName] = setInterval((v, f, s, c, u) => {
        if (this[c] < ELEMENT_CHECK_COUNT) {
            if (location.href.toLowerCase().includes(u?.toLowerCase())) {
                clearInterval(this[v]);
                pollerForFn(f,s);
            }
            this[c]++;
        } else {
            // console.log(fnName, ' Clear ' );
            clearInterval(this[v]);
        }
    }, 1000, varName, fnName, selector, counter, urlToCheck);
}

window.onload = () => {
    setTimeout(() => init(), 500);
}

// ( (history) => {
//     var pushState = history.pushState;
//     history.pushState =  (state) => {
//         // YOUR CUSTOM HOOK / FUNCTION
//         if(location.href.endsWith('/s/groups')){
//             pollerForFn('handleGroupOpen',)
//         }
//         return pushState.apply(history, arguments);
//     };
// })(window.history);

init = () => {

    // for (var i = 1; i < 99999; i++)
    //     window.clearInterval(i);
    console.log("@@@@ onload JS");

    pollerForFn('handleButtonClick', "button");
    pollerForFn('tileClickHandle', "a.peak-tile");
    //pollerForFn('handleLoginClick', "a.login-link");
    // pollerForFn('handleTabClick', "a.tabHeader, li.uiMenuItem a");
    pollerForFn('handleBookmarkButton', "button.bookmarkButton");
    pollerForFn('handleSearchInput', ".CoveoStandaloneSearchbox input");
    pollerForFn('handleSearchButton', ".CoveoSearchButton");
    pollerForFn('handleFollowKA', ".button.follow");
    pollerForFn('handleSelectAsBest', "feeds_best_answer-toggle");
    pollerForFn('handleAnswer', ".cuf-commentSubmit");
    pollerForFn('topicClickHandle', ".topicNameGrid li a");
    pollerForFn('universalNavHandle', ".uniTabs");
    pollerForFn('handleTopicTabSelection', ".uiTabset .uiTabBar ul li");
    pollerForFnURLCheck('handleViewAllTopic',".forceCommunityTopicCatalog a",'/PLM/s/topiccatalog');
    pollerForFn('sendLoginUserId', ".userid");

    
    console.log('GTM Load finish');

}

sendEvent = (evt) => {
    console.log("@@@@ push", evt);
    //dataLayer.push(evt);
    /* *************************  */
    let evt2 = { ...evt };
    delete evt2["Event Name"];
    window.analytics.track(evt["Event Name"], evt2);
}

const buttonsToTrack = ['start a discussion', 'click to follow'];
handleButtonClick = selector => {

    const btns = document.querySelectorAll(selector);

    btns.forEach(btn => {

        btn.addEventListener("click", function () {

            let buttonName = this.innerHTML.length < 20 ? this.innerHTML : this.title;
            console.log("@@@@ ", buttonName);
            if (buttonName && buttonsToTrack.includes(buttonName.toLowerCase())) {

                if (buttonName.toLowerCase() == 'start a discussion') {
                    pollerForFn('discussionStarted', '.cuf-publisherShareButton');
                }

                if (buttonName.toLowerCase() == 'click to follow' && location.href.includes('/s/topic/')) {
                    let topic = location.href.split("/").pop();
                    topic = topic.includes('#') ? topic.split('#')[0] : topic;
                    sendEvent({
                        "Event Name": "Topic Followed",
                        "label": location.href,
                        "category": topic,
                        "topic": topic
                    });
                }
            }
        });
    });
}

discussionStarted = selector => {
    let btn = document.querySelector(selector);
    if (btn) {
        btn.addEventListener('click', () => {
            let evt = {};
            evt["Event Name"] = 'Discussion Started';
            let topic = document.querySelector('.forceChatterQuestionPost .cuf-navigationTopics select ').value;
            evt.topic = Array.from(document.querySelectorAll('.forceChatterQuestionPost .cuf-navigationTopics select option')).filter(opt => opt.value == topic)[0].innerHTML;
            evt.category = evt.topic;
            evt.label = document.querySelector('.forceChatterQuestionPost textarea.cuf-questionTitleField').value;
            evt.title = evt.label;
            sendEvent(evt);
        })

    }
}

tileClickHandle = selector => {
    const links = document.querySelectorAll(selector);
    links.forEach(a => {
        a.addEventListener("click", (event) => {
            let dataId = event.currentTarget.dataset.id;
            sendEvent({
                "Event Name": "Card CTA Clicked",
                "category": "click",
                "label": labelMap[dataId],
                "click_text": labelMap[dataId]
            });
        });
    });
}

handleLoginClick = selector => {
    const links = document.querySelectorAll(selector);
    links.forEach(a => {
        a.addEventListener("click", () => {
            sendEvent({
                "Event Name": "Signed In",
                "label": location.href,
                "category": "login",
                "url": location.href
            });
        });
    });
}

// const eventConfig = {
//     'topic search': {
//         "Event Name": "Topic Search",
//         "Event Description": "User has navigated to the topic search tab in a topic",
//         "category": " Topic Search"
//     },
//     'discussions': {
//         "Event Name": "Clicked on a Discussion",
//         "Event Description": "User has clicked on a discussion thread to read more",
//         "category": "Clicked on a Discussion"
//     },
// };
// handleTabClick = selector => {
//     const links = document.querySelectorAll(selector);
//     let linksToProcess = ['topic search', 'discussions'];
//     links.forEach(a => {
//         if (a.title && linksToProcess.includes(a.title.toLowerCase())) {
//             a.addEventListener("click", () => {
//                 let topic = document.querySelectorAll('.headlineTitleText .uiOutputText')[0].innerHTML;
//                 let evt = eventConfig[a.title.toLowerCase()];
//                 evt.Label = a.title + '|' + topic;
//                 sendEvent(evt);
//             });
//         }
//     });
// }

handleBookmarkButton = selector => {
    let button = document.querySelector(selector);
    if (button) {
        button.addEventListener("click", () => {
            sendEvent({
                "Event Name": "Discussion Bookmarked",
                "category": document.title,
                "topic": document.title,
                "label": document.querySelector('[data-type*="QuestionPost"] .cuf-questionTitle .uiOutputText').innerHTML,
                "question": evt.label,
                "detail": document.querySelector('[data-type*="QuestionPost"] .cuf-feedBodyText .uiOutputText').innerHTML
            });
        });
    }
}

handleSearchInput = selector => {
    let searchInp = document.querySelector(selector);
    if (searchInp) {
        searchInp.addEventListener("keypress", (event) => {
            if (event.key === 'Enter') {
                let evt = {
                    "Event Name": "Search Conducted",
                    "category": document.title,
                    "page_title": document.title

                };
                evt.label = event.target.value + '|Search';
                evt.query = event.label;
                sendEvent(evt);
                pollerForFn('handleSidebarNav', ".coveo-dynamic-hierarchical-facet-values li");
            }
        });
    }
}

handleSearchButton = selector => {
    let searchBtn = document.querySelector(selector);
    if (searchBtn) {
        searchBtn.addEventListener("click", (event) => {
            let evt = {
                "Event Name": "Search Conducted",
                "category": document.title,
                "page_title": document.title
            };
            evt.label = document.querySelector('.CoveoStandaloneSearchbox input').value + '|Search';
            evt.query = event.label;
            sendEvent(evt);
            pollerForFn('handleSidebarNav', ".coveo-dynamic-hierarchical-facet-values li");
            
        });
    }
}

handleSidebarNav = selector => {
    let trees = document.querySelectorAll(selector);
    if (trees.length) {
        trees.forEach(li => {
            li.addEventListener('click', (event) => {
                let category = event.currentTarget.dataset.value;
                sendEvent({
                    "Event Name": "Followed Topic Selected",
                    "category": category,
                    "topic": category,
                    "label": category,
                    "type": category
                });
            })
        });
    }
}

handleFollowKA = selector => {
    let btns = document.querySelectorAll(selector);
    if (btns.length && location.href.includes('/s/article/')) {
        btns.forEach(btn => {
            btn.addEventListener("click", () => {
                sendEvent({
                    "Event Name": "Knowledge Article Followed",
                    "category": document.querySelector('.forceTopicTopicLink .uiOutputText').innerHTML,
                    "topic": document.querySelector('.forceTopicTopicLink .uiOutputText').innerHTML,
                    "label": document.title,
                    "title": document.title
                });

            });
        });
    }
}

handleSelectAsBest = selector => {
    let btn = document.querySelector(selector);
    if (btn) {
        btn.addEventListener("click", () => {
            let evt = {
                "Event Name": "Best Answer Selected",
                "category": document.title,
                "topic": document.title
            };
            evt.label = document.querySelector('[data-type*="QuestionPost"] .cuf-questionTitle .uiOutputText').innerHTML;
            evt.question = evt.label;
            evt.detail = document.querySelector('[data-type*="QuestionPost"] .cuf-feedBodyText .uiOutputText').innerHTML;
            sendEvent(evt);
        });
    }
}

handleAnswer = selector => {
    let btn = document.querySelector(selector);
    if (btn) {
        btn.addEventListener("click", () => {
            let evt = {
                "Event Name": "Discussion Answered",
                "category": document.title,
                "topic": document.title
            };
            evt.label = document.querySelector('[data-type*="QuestionPost"] .cuf-questionTitle .uiOutputText').innerHTML;
            evt.question = evt.label;
            sendEvent(evt);
        });
    }
}

topicClickHandle = selector => {
    const topics = document.querySelectorAll(selector);
    topics.forEach(topic => {
        topic.addEventListener("click", (event) => {
            sendEvent({
                "Event Name": "Nav Bar Topic Selected",
                "category": event.currentTarget.innerText,
                "label": event.currentTarget.href,
                "topic": event.currentTarget.innerText,
                "click_url": event.currentTarget.href
            });
            console.log('topicClickHandle');
            pollerForFn('handleTopicTabSelection', ".uiTabset .uiTabBar ul li");
        });
    });
}

universalNavHandle = selector => {
    const tabs = document.querySelectorAll(selector);
    tabs.forEach(tab => {
        tab.addEventListener("click", (event) => {
            sendEvent({
                "Event Name": "Universal Nav Bar Item Clicked",
                "category": "nav",
                "label": event.currentTarget.title,
                "click_text": event.currentTarget.title,
                "click_url": event.currentTarget.href
            });
        });
    });
}

handleGroupOpen = selector => {
    const groups = document.querySelectorAll(selector);
    groups.forEach(group => {
        let link = group.querySelector('a');
        let groupName = group.querySelector('span').innerText;
        let grpPrivacy = group.querySelector('ul.secondaryFields li span').innerText;
        link.addEventListener('click', (event, gn, gp) => {
            sendEvent({
                "Event Name": "Group Opened",
                "category": gp,
                "label": gn,
                "group_name": gn,
                "group_privacy": gp
            });
        }, groupName,grpPrivacy);
    });
}

let tabToCheck = {
    'DISCUSSIONS':'Topic Discussions Opened',
    'KNOWLEDGE ARTICLES':'Topic Articles Opened',
    'IDEAS':'Topic Ideas Opened',
    'TOPIC SEARCH':'Topic Search Opened'
};
handleTopicTabSelection = selector => {
    console.log('handleTopicTabSelection')
    const tabs = document.querySelectorAll(selector);
    tabs.forEach(tab => {
        if(Object.keys(tabToCheck).includes(tab.innerText)){
            tab.addEventListener('click', (event) => {
                let topicName = document.querySelector('.forceCommunityHeadline .headlineTitle').innerText;
                sendEvent({
                    "Event Name": tabToCheck[tab.innerText],
                    "category": topicName,
                    "label": topicName,
                    "topic": topicName,
                    "type": topicName
                });
            });

            if(tab.innerText == 'IDEAS'){
                tab.addEventListener('click', (event) => pollerForFn('handleSubmitNewIdeaButtonClick', ".uiTabset .active button"));
            }
        }
    });
}

handleViewAllTopic = selector => {
    let topicLinks = document.querySelectorAll(selector);
    topicLinks.forEach(link => {
        link.addEventListener('click', () => {
            console.log('handleViewAllTopic');
            pollerForFn('handleTopicTabSelection', ".uiTabset .uiTabBar ul li");
        })
    })
}

handleSubmitNewIdeaButtonClick = selector => {
    let buttons = document.querySelectorAll(selector);
    buttons.forEach(btn => {
        console.log(btn.value)
        if(btn.value == '/new-idea'){
            btn.addEventListener('click', (event) => {
                pollerForFn('handleSubmitNewIdea', ".cSVNSUMMITS_Ideas_New button.slds-button_brand");
            });
        }
    });
}

handleSubmitNewIdea = selector => {
    let buttons = document.querySelectorAll(selector);
    buttons.forEach(btn => {
        if(btn.name == 'Submit'){
            btn.addEventListener('click', (event) => {
                let topicName = document.querySelector('.cSVNSUMMITS_Ideas_New select').value;
                sendEvent({
                    "Event Name": "Idea Submitted",
                    "category": topicName,
                    "label": topicName,
                    "topic": topicName,
                    "type": topicName
                });
            });
        }
    });
}

isIdSend = false;
sendLoginUserId = selector => {
    if(!isIdSend){
        let userId = document.querySelector(selector)?.dataset.user;
        if(userId){
            sendEvent({
                "Event Name": "LoggedIn User",
                "userId": userId,
                "category":"user id"
            });
            isIdSend = true;
        }
    }
}
